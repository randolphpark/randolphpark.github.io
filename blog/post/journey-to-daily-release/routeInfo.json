{"template":"../src/containers/Post","sharedHashesByProp":{},"data":{"post":{"content":"\nWhat you repeat builds who you are. Having a good habit is shaping you in a long run. For software development, I think Daily Release would be the keystone habit that anchors a lot of positive changes.\n\n* Encourage small size story\n* Easy to test and isolate the problem\n* Different mindset while we work on a story with “terrifying” responsibility and a better sense of achievement\n* Continuous value delivery for business\n* Data-informed feature delivery is possible.\n* From Agile to “Lean story”\n* Faster feedback loop\n* Shaping company culture to focus on the most important deliverable task.\n\n\nThis is entire cultural shift and altering mindset to focus on each day and get most of the each day.\n\nAs a developer, this would be daily routine she/he might go through.\n\n* Start new story you picked yesterday first thing at morning.\n* Start development in branch.\n* Add sufficient enough test, since it is small enough.\n* Fishing up story 3 hours prior to the end of the day. S* Quash your commit , merge then ship to prod.\n* * Quick check in prod, see if it is working ok. If it breaks anything, fix it within 1 hours. If not revert. It should be easy to fix, since it is small enough.\n* If everything is great, then pick up the story you are going to work on tomorrow and see if it is feasible to deliver in one day.\n* You might think the story is too big that it cannot delivered today. So you break down the story even further.\n* Double check with PO about the trim down version of story. And confirm with business value.\n* Head home and close the loop of work.\n\nThe simple principle of daily release is “All your work HAVE TO hit production by the end of the day. The rest? I believe you can figure it out”.\n\nHowever, in the first day practicing Daily Release, I have been blocked. Because, today’s task is learning new techni* Que/tool. It was spike. This is “great” start and I felt I just discovered 2% of the problem. There would be still 98% to discover and solve.\n\nIt would be interesting journey to document all the problem I have enchanted and jot down the attempts and solution I tried.\n\n\nAll my questions.\n\n* Q0. The value I can deliver TODAY vs the value we want to deliver but cannot finish TODAY.\n* Q1. If the story is spike or learning, how can I do still practice Daily Release?\n* Q2. What if we can get rid of iteration planning and only prioritise everyday and release everyday? What would be key difference between having plan for a week vs having plan only for TODAY?\n* Q3. What kind of tooling would be necessary to enable daily release? Is there any platform to automate this process?\n* Q4. What kind of book I can search for building fundamental understanding?\n* Q5. It feels like Elixir being fault torrent programming language, it would have some uni* Que advantage to enable Daily Release. But what would be that?\n* Q6. What would be the biggest obstacle to practice this method?\n* Q7. What kind of project suite this? or every project should do it?\n* Q8. How to design physical environment to enable Daily Release?\n* Q9. What is the checklist for Daily Release?\n* Q10. Would it be counter-productive due to the overhead infrastructure work?\n* Q11. What kind of company need it? Startup? If it is Startup, then are they already doing it?\n* Q12. When Daily Release would be the trend? It seems the idea is still too aggressive.\n* Q13. What kind of industry, produce and team need this kind of integration speed especially?\n* Q14. What is the difference between Daily Release vs Continuous Delivery?\n* Q15. Feature Toggle vs Feature Branch in Daily Release\n* Q16. Versioning in Daily Release\n* Q17. Team structure and collaboration dynamics\n* Q18. Would it weaken the communication between people and increase communication cost\n* Q19.  Would it decrease the flexibility of project? \n* Q20. Long term value vs short-term value.\n* Q21. A lot of redos with small changes vs one step change with bigger gap?\n* Q22. How to build confidence on daily release is working?\n* Q23. How to leverage language feature to boost confidence level of system stability? What kind of pattern can enable this?\n* Q24. What is the checklist for daily release? Infrastructure aspect, Data aspect, Pipeline, Design, Development, Problem domain and industry\n\n* Q25. How to deal with hardware dev like robotics?\n* Q26. How to improve 1% as a team?\n* Q27. How to build a environment that cultivate good daily release setup?\n* Q28. How remote work with daily release\n\n---\n","data":{"layout":"blog","title":"Journey to Daily Release","date":"2019-02-17T00:00:00.000Z","thumbnail":"https://blobscdn.gitbook.com/v0/b/gitbook-28427.appspot.com/o/assets%2F-LMbBoI8vu3x9X4dGLkW%2F-LMbD0twHk* Q8lP9cbLBy%2F-LMbDc3UH7HdwdRdDt48%2Fanchor-3600304_1280.jpg?alt=media&token=d0578246-ffd4-469c-87bb-111305d858bd","rating":"5","slug":"journey-to-daily-release"},"isEmpty":false,"excerpt":""}},"path":"blog/post/journey-to-daily-release"}
